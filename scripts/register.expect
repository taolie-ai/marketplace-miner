#!/usr/bin/expect

set timeout -1


#Password
set password $env(password)


set coldkey $env(walletName)

set hotkey $env(walletHotkey)

set network $env(subtensorNetwork)

set netuid $env(netuid)

set regcost $env(regCost)


# Enable debugging to trace what expect is matching

spawn bash
send "while true; do btcli s register --netuid $netuid --subtensor.network $network --wallet.name $coldkey --wallet.hotkey $hotkey; 
    sleep 5;
done\r"


# Handle interactions
expect {
    -re {The cost to register by recycle is (?:\x1b\[[0-9;]*[mK])*Ï„(?:\x1b\[[0-9;]*[mK])*\s*([0-9.]+)} {
        set cost $expect_out(1,string)
        send_user "Detected cost: $cost\n"
        if {[scan $cost %f] > $regcost} {         # SET COST HERE
            send "N\r"
        } else {
            send "Y\r"
        }
        exp_continue
    }
    "Enter password to unlock key:" {
        send "$password\r"                     
        exp_continue
    }
    "Do you want to continue? \[y/n\] (n):" {
        send "Y\r"
        exp_continue
    }
    "Insufficient" {
        send_user "Not enough balance \n"
        exp_continue
    }
    "to register on" {
        send "Y\r"
        exp_continue

    }
    timeout {
        send_user "Script timeout or error\n"
        exit
    }
}

interact

